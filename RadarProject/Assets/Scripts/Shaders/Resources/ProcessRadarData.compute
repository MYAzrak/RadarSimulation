#pragma kernel ProcessRadarData
#pragma kernel GenerateRain

// Define constants
#define THREAD_GROUP_SIZE 8

// Input textures and buffers
Texture2D<float4> InputTexture;
RWStructuredBuffer<int> RadarBuffer;
StructuredBuffer<float> RCSBuffer;

// Parameters
float MaxDistance;
float MinDistance;
float ParallelThreshold;
float Noise;
float Resolution;
int ImageRadius;
float CurrentRotation;

// Precalculated Radar Equation Constant
float PrecalculatedRadarConstant;

RWStructuredBuffer<int> RainBuffer;

// Rain simulation parameters
float RainProbability;
int RainIntensity;
int RandomSeed;
float PrecalculatedRainConstant;

// Utility function to scale value
int ScaleValue(int originalValue, int originalMax, int newMax)
{
    return (int)round((float)originalValue / originalMax * newMax);
}

float CalculateSignalStrength(float distance, float radarCrossSection)
{
    float Pr = PrecalculatedRadarConstant * radarCrossSection / (distance * distance * distance * distance);
    return 10 * log10(Pr);
}

// PCG random number generator
uint PCGHash(uint state)
{
    state = state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float RandomFloat(inout uint state)
{
    state = PCGHash(state);
    return float(state) / 4294967295.0; // 2^32 - 1
}

[numthreads(THREAD_GROUP_SIZE, THREAD_GROUP_SIZE, 1)]
void ProcessRadarData(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the input texture
    uint width, height;
    InputTexture.GetDimensions(width, height);

    // Check if the current thread is within the texture bounds
    if (id.x < width && id.y < height)
    {
        // Sample the input texture
        float4 pixel = InputTexture[id.xy];
        
        // Extract normal and depth information
        float3 normal = pixel.rgb * 2 - 1; // Convert from [0,1] to [-1,1] range
        float viewSpaceDepth = pixel.a;
        
        // Clamp depth to valid range
        viewSpaceDepth = clamp(viewSpaceDepth, MinDistance, MaxDistance);

        // Calculate distance with noise
        int distance = (int)round(viewSpaceDepth);
        
        // Scale distance to image radius
        distance = ScaleValue(distance, (int)MaxDistance, ImageRadius);

        // Get the RCS value for this pixel
        float rcs = RCSBuffer[id.y * width + id.x] * normal[2];

        // Check if there's an object at this pixel (RCS > 0)
        if (distance > 15 && rcs > 0)
        {
            float signalStrength = CalculateSignalStrength(viewSpaceDepth, rcs);
            int scaledSignalStrength = (int)((signalStrength + 200) * 2); // Scale to 0-200 range assuming -100 to 0 dB
            InterlockedAdd(RadarBuffer[distance], scaledSignalStrength);
        }
    }
}

[numthreads(1, 1, 1)]
void GenerateRain(uint3 id : SV_DispatchThreadID)
{
    uint randomState = RandomSeed;

    for (int i = 0; i < RainIntensity; i++)
    {
        if (RandomFloat(randomState) < RainProbability)
        {
            // Generate a random distance for the rain drop
            float randomDistance = RandomFloat(randomState) * MaxDistance;
            int distanceIndex = (int)(randomDistance / MaxDistance * ImageRadius);
            
            // Calculate signal strength for the rain drop using precalculated constant
            float rainSignalStrength = 10 * log10(PrecalculatedRainConstant / (randomDistance * randomDistance * randomDistance * randomDistance));
            int scaledRainSignalStrength = (int)((rainSignalStrength + 200) * 2);

            // Add the rain signal to the rain buffer
            InterlockedAdd(RainBuffer[distanceIndex], scaledRainSignalStrength);
        }
    }
}
